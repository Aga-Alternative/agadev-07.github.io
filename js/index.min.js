const INIT_YEAR = 2023;
const AUTHOR = 'AgaDev';
function useTheme() {
let theme = localStorage.getItem('theme');
if (theme !== 'dark') theme = 'light';
localStorage.setItem('theme', theme);
document.documentElement.setAttribute('data-theme', theme);
}
function replaceTheme() {
let theme = localStorage.getItem('theme');
document.documentElement.removeAttribute('data-theme');
theme = theme === 'dark' ? 'light' : 'dark';
localStorage.setItem('theme', theme);
useTheme();
}
const es = {
"_navigator_": "Automático",
"_name_": "Español",
"or": "%s o %s",
"and": "%s y %s",
"comma": "%s, %s",
"home": "Inicio",
"about": "Sobre mí",
"contact": "Contacto",
"projects": "Proyectos",
"projects_description": "Proyectos en los que he trabajado.",
"main_projects": "Proyectos principales",
"main_projects_description": "Proyectos principales en los que he trabajado.",
"secondary_projects": "Proyectos secundarios",
"secondary_projects_description": "Proyectos secundarios en los que he trabajado.",
"error_404": "Error 404",
"error_404_msg": "Página no encontrada",
"agalang_title": "Agal",
"agalang_image": "Vista previa de Agal en Visual Studio Code",
"agalang_description": "Agal es un lenguaje de programación en español, tomando conceptos de algunos lenguajes como las propiedades de instancia o la asincronía.",
"agamca_title": "Aga-MCA",
"agamca_image": "Vista previa de la pagina de Aga-MCA",
"agamca_description": "Aga-MCA es un proyecto donde subo los addons, scripts y texturas que hago para el videojuego Minecraft.",
"language_selector": "Selector de idioma",
"theme_button": "Selector de tema",
"developed_in": "Desarrollado en %s."
};
const en = {
"_navigator_": "Automatic",
"_name_": "English",
"or": "%s or %s",
"and": "%s and %s",
"comma": "%s, %s",
"home": "Home",
"about": "About me",
"contact": "Contact",
"projects": "Projects",
"projects_description": "Projects I have worked on.",
"main_projects": "Main projects",
"main_projects_description": "Main projects I have worked on.",
"secondary_projects": "Secondary projects",
"secondary_projects_description": "Secondary projects I have worked on.",
"error_404": "Error 404",
"error_404_msg": "Page not found",
"agalang_title": "Agal",
"agalang_image": "Agal Preview in Visual Studio Code",
"agalang_description": "Agal is a Spanish programming language, borrowing concepts from other languages such as instance properties and asynchrony.",
"agamca_title": "Aga-MCA",
"agamca_image": "Preview of the Aga-MCA page",
"agamca_description": "Aga-MCA is a project where I upload the addons, scripts, and textures I create for the Minecraft video game.",
"language_selector": "Language selector",
"theme_button": "Theme selector",
"developed_in": "Developed in %s."
};
const pt = {
"_navigator_": "Automática",
"_name_": "Português",
"or": "%s ou %s",
"and": "%s e %s",
"comma": "%s, %s",
"home": "Início",
"about": "Sobre mim",
"contact": "Contato",
"projects": "Projetos",
"projects_description": "Projetos em que trabalhei.",
"main_projects": "Projetos principais",
"main_projects_description": "Projetos principais em que trabalhei.",
"secondary_projects": "Projetos secundários",
"secondary_projects_description": "Projetos secundários em que trabalhei.",
"error_404": "Erro 404",
"error_404_msg": "Página não encontrada",
"agalang_title": "Agal",
"agalang_image": "Visualização do Agal no Visual Studio Code",
"agalang_description": "Agal é uma linguagem de programação espanhola que toma emprestados conceitos de outras linguagens, como propriedades de instância e assincronia.",
"agamca_title": "Aga-MCA",
"agamca_image": "Prévia da página do Aga-MCA",
"agamca_description": "Aga-MCA é um projeto onde eu envio os addons, scripts e texturas que crio para o jogo Minecraft.",
"language_selector": "Seletor de idioma",
"theme_button": "Seletor de Temas",
"developed_in": "Desenvolvido em %s."
};
const ko = {
"_navigator_": "자동",
"_name_": "한국어",
"or": "%s 또는 %s",
"and": "%s 및 %s",
"comma": "%s, %s",
"home": "홈",
"about": "소개",
"contact": "연락처",
"projects": "프로젝트",
"projects_description": "내가 작업한 프로젝트입니다.",
"main_projects": "주요 프로젝트",
"main_projects_description": "내가 작업한 주요 프로젝트입니다.",
"secondary_projects": "부가 프로젝트",
"secondary_projects_description": "내가 작업한 부가 프로젝트입니다.",
"error_404": "오류 404",
"error_404_msg": "페이지를 찾을 수 없습니다",
"agalang_title": "Agal",
"agalang_image": "Visual Studio Code에서 본 Agal 미리보기",
"agalang_description": "Agal은 인스턴스 속성이나 비동기성과 같은 일부 언어의 개념을 바탕으로 한 스페인어 프로그래밍 언어입니다.",
"agamca_title": "Aga-MCA",
"agamca_image": "Aga-MCA 페이지 미리보기",
"agamca_description": "Aga-MCA는 내가 만든 Minecraft용 애드온, 스크립트 및 텍스처를 업로드하는 프로젝트입니다.",
"language_selector": "언어 선택기",
"theme_button": "테마 선택기",
"developed_in": "%s로 개발되었습니다."
};
const translations = { es, en, pt, ko };
function getTranslation(lang, key) {
if (key in translations[lang]) return translations[lang][key];
for (const lang of navigator.languages) {
let language = lang.split('-')[0];
if (translations[language]?.[key]) return translations[language][key];
}
return translations.en[key] ?? key;
}
function useTranslate() {
const language = getLanguage();
const $html = document.documentElement;
const originalLang = $html.getAttribute('lang');
if (originalLang === language) return;
$html.setAttribute('lang', language);
if (localStorage.getItem('lang'))
document.querySelector('select#language-select').value = language;
for (const $el of document.querySelectorAll('[data-lang-key]')) {
const preLang = $el.hasAttribute('data-lang') ? $el.getAttribute('data-lang') : language;
const lang = preLang in translations ? preLang : 'en';
let value = getTranslation(lang, $el.getAttribute('data-lang-key'));
if ($el.hasAttribute('data-lang-args')) {
const args = $el.getAttribute('data-lang-args').split(',');
value = value.replace('%s', args.shift());
}
if ($el.hasAttribute('data-lang-args-and-list')) {
const args = $el.getAttribute('data-lang-args-and-list').split(',');
const comma = getTranslation(lang, 'comma');
const and = getTranslation(lang, 'and');
if (args.length > 1) {
const last = args.pop();
let result = args[0];
for (let i = 1;
i < args.length;
i++) {
result = comma.replace('%s', result).replace('%s', args[i]);
}
result = and.replace('%s', result).replace('%s', last);
value = value.replace('%s', result);
} else value = value.replace('%s', args.shift());
}
if ($el.hasAttribute('data-lang-type')) {
let type = $el.getAttribute('data-lang-type');
$el.setAttribute(type, value);
} else $el.textContent = value;
}
}
function getLanguage() {
const saved = localStorage.getItem('lang');
if (saved && saved in translations) return saved;
const detected = navigator.languages
.map(l => l.split('-')[0])
.find(l => l in translations);
return detected || 'en';
}
function setLanguage() {
const lang = document.querySelector('select#language-select').value;
if (!lang) localStorage.removeItem('lang');
if (lang in translations) localStorage.setItem('lang', lang);
useTranslate();
}
const LOGO = "svg/logo.svg";
const THEMES = 'svg/themes.svg';
const NAVIGATOR = [
['/', 'home'],
['/projects', 'projects'],
];
class AgaHeader extends HTMLElement {
constructor() {
super();
const $info = document.createElement('div');
const $logo = document.createElement('svg');
$logo.setAttribute('data-src', LOGO);
$info.appendChild($logo);
const $author = document.createElement('h1');
$author.textContent = AUTHOR;
$info.appendChild($author);
this.appendChild($info);
const $nav = document.createElement('nav');
const $ul = document.createElement('ul');
for (const [link, translate] of NAVIGATOR) {
const $li = document.createElement('li');
const $a = document.createElement('a');
$a.href = link;
$a.setAttribute('data-lang-key', translate);
$li.appendChild($a);
$ul.appendChild($li);
};
$nav.appendChild($ul);
this.appendChild($nav);
const $div = document.createElement('div');
const $languageSelector = document.createElement('select');
$languageSelector.id = "language-select";
$languageSelector.setAttribute("data-lang-key", "language_selector");
$languageSelector.setAttribute("data-lang-type", "aria-label");
const $navigator = document.createElement('option');
$navigator.setAttribute('value', '');
$navigator.setAttribute('data-lang-key', '_navigator_');
$languageSelector.appendChild($navigator);
for (const lang of Object.keys(translations)) {
const $lang = document.createElement('option');
$lang.setAttribute('value', lang);
$lang.setAttribute('data-lang', lang);
$lang.setAttribute('data-lang-key', '_name_');
$languageSelector?.appendChild($lang);
}
$languageSelector.addEventListener("change", setLanguage);
$div.appendChild($languageSelector);
const $themeButton = document.createElement('button');
$themeButton.setAttribute("data-lang-key", "theme_button");
$themeButton.setAttribute("data-lang-type", "aria-label");
const $svg = document.createElement('svg');
$svg.setAttribute('data-src', THEMES);
$themeButton.appendChild($svg);
$themeButton.addEventListener('click', () => {
$themeButton.setAttribute('disabled', '');
document.documentElement.className = 'animate';
setTimeout(() => $themeButton.removeAttribute('disabled'), 1000);
replaceTheme();
});
$div.appendChild($themeButton);
this.appendChild($div);
}
}
customElements.define('aga-header', AgaHeader);
class AgaProject extends HTMLElement {
constructor() {
super();
}
connectedCallback() {
const attrTypeImage = this.getAttribute('data-image-type');
const attrName = this.getAttribute('data-name');
const attrLangs = this.getAttribute('data-langs');
const tagType = attrTypeImage == 'svg' ? 'svg' : 'img';
if (this.childElementCount) return;
const $imageWrapper = document.createElement("div");
$imageWrapper.className = "image-wrapper";
const imageSrc = `${tagType}/${attrName}.${attrTypeImage}`;
const $image = document.createElement(tagType);
$image.setAttribute('data-src', imageSrc);
if (tagType == 'img') {
$image.setAttribute("data-lang-key", "language_selector");
$image.setAttribute("data-lang-type", "alt");
$image.setAttribute("draggable", "false");
}
$imageWrapper.appendChild($image);
this.appendChild($imageWrapper);
const $h3 = document.createElement('h3');
$h3.setAttribute('data-lang-key', `${attrName}_title`);
this.appendChild($h3);
const $p_developedIn = document.createElement('p');
$p_developedIn.classList.add('developed-in');
if (attrLangs.includes(',')) $p_developedIn.setAttribute('data-lang-args-and-list', attrLangs);
else $p_developedIn.setAttribute('data-lang-args', attrLangs);
$p_developedIn.setAttribute('data-lang-key', 'developed_in');
this.appendChild($p_developedIn);
const $description = document.createElement('p');
$description.setAttribute('data-lang-key', `${attrName}_description`);
this.appendChild($description);
}
}
customElements.define('aga-project', AgaProject);
const AGA_PROJECT_TAG = 'aga-project';
class AgaSection extends HTMLElement {
constructor() {
super();
}
connectedCallback() {
const attrType = this.getAttribute('data-type');
const attrName = this.getAttribute('data-name') || attrType;
const $title = document.createElement('h2');
$title.setAttribute('data-lang-key', attrName);
const $description = document.createElement('h3');
$description.setAttribute('data-lang-key', `${attrName}_description`);
const $container = document.createElement('div');
$container.classList.add('container');
[...this.children].forEach(($child, i, list) =>{
const $agaProject = $child.tagName.toLowerCase() == AGA_PROJECT_TAG ? $child : $child.querySelector(AGA_PROJECT_TAG);
const isLast = (list.length - i) == 1;
const isOdd = i % 2 == 0;
if ($agaProject && isLast && isOdd) $agaProject.className = "last-odd";
$container.appendChild($child);
});
this.appendChild($title);
this.appendChild($description);
this.appendChild($container);
}
}
customElements.define('aga-section', AgaSection);
function setInterface() {
document.title = AUTHOR;
const footer_p = document.createElement('p');
footer_p.textContent = (function () {
const actualYear = new Date().getFullYear();
const years = actualYear > INIT_YEAR ? `${INIT_YEAR} - ${actualYear}` : INIT_YEAR;
return `©${years} ${AUTHOR}`;
})();
document.querySelector('footer').appendChild(footer_p);
}
async function loadSVG(element) {
const src = element.getAttribute('data-src');
const domParser = new DOMParser();
const data = await fetch(src);
const rawSVG = await data.text();
const SVG = domParser.parseFromString(rawSVG, 'image/svg').querySelector('svg');
for (const attribute of SVG.attributes) SVG.setAttribute(attribute.name, attribute.value);
element.replaceWith(SVG);
}
function loadSVGs() {
for (const svg of document.querySelectorAll('svg[data-src]')) loadSVG(svg);
}
document.addEventListener('DOMContentLoaded', () => {
loadSVGs();
useTheme();
setInterface();
useTranslate();
});